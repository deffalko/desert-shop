{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport data from \"../../data.json\";\nexport const loadCountries = createAsyncThunk(\"@@countries/load-countries\", () => {\n  return {\n    data\n  };\n}); // export const loadCountries = createAsyncThunk(\n//   \"@@countries/load-countries\",\n//   (_, { extra: { client, api } }) => {\n//     return client.get(api.ALL_COUNTRIES);\n//   }\n// );\n\nconst initialState = {\n  status: \"idle\",\n  error: null,\n  list: []\n};\nconst countrySlice = createSlice({\n  name: \"@@countries\",\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(loadCountries.fulfilled, (state, action) => {\n      state.status = \"received\";\n      state.list = action.payload.data;\n    }); // .addCase(loadCountries.pending, (state) => {\n    //   state.status = \"loading\";\n    //   state.error = null;\n    // })\n    // .addCase(loadCountries.rejected, (state, action) => {\n    //   state.status = \"rejected\";\n    //   state.error = action.payload || action.meta.error;\n    // })\n    // .addCase(loadCountries.fulfilled, (state, action) => {\n    //   state.status = \"received\";\n    //   state.list = action.payload.data;\n    // });\n  }\n});\nexport const countryReducer = countrySlice.reducer;\nexport const selectCountriesInfo = state => ({\n  status: state.countries.status,\n  error: state.countries.error,\n  qty: state.countries.list.length\n});\nexport const selectAllCountries = state => state.countries.list; // export const selectVisibleCountries = (state, { search = \"\", region = \"\" }) => {\n//   return state.countries.list.filter(\n//     (country) =>\n//       country.name.toLowerCase().includes(search.toLowerCase()) &&\n//       country.region.includes(region)\n//   );\n// };\n\nexport const selectVisibleCountries = (state, _ref) => {\n  let {\n    search = \"\",\n    region = \"\",\n    filterStatus = \"\"\n  } = _ref;\n  return state.countries.list.filter(item => {\n    const matchesSearch = item.name.toLowerCase().includes(search.toLowerCase());\n    const matchesRegion = region ? item.description.includes(region) : true;\n    let matchesStatus = true;\n\n    if (filterStatus === \"true\") {\n      matchesStatus = item.isActive === true;\n    } else if (filterStatus === \"false\") {\n      matchesStatus = item.isActive === false;\n    } // Если filterStatus пустая строка, фильтр по статусу не применяется\n\n\n    return matchesSearch && matchesRegion && matchesStatus;\n  });\n};","map":{"version":3,"sources":["C:/Users/gumar/OneDrive/Рабочий стол/desert-shop/src/features/countries/countries-slice.js"],"names":["createAsyncThunk","createSlice","data","loadCountries","initialState","status","error","list","countrySlice","name","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","countryReducer","reducer","selectCountriesInfo","countries","qty","length","selectAllCountries","selectVisibleCountries","search","region","filterStatus","filter","item","matchesSearch","toLowerCase","includes","matchesRegion","description","matchesStatus","isActive"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AAEA,OAAOC,IAAP,MAAiB,iBAAjB;AAEA,OAAO,MAAMC,aAAa,GAAGH,gBAAgB,CAC3C,4BAD2C,EAE3C,MAAM;AACJ,SAAO;AAAEE,IAAAA;AAAF,GAAP;AACD,CAJ0C,CAAtC,C,CAOP;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAME,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAE,MADW;AAEnBC,EAAAA,KAAK,EAAE,IAFY;AAGnBC,EAAAA,IAAI,EAAE;AAHa,CAArB;AAMA,MAAMC,YAAY,GAAGP,WAAW,CAAC;AAC/BQ,EAAAA,IAAI,EAAE,aADyB;AAE/BL,EAAAA,YAF+B;AAG/BM,EAAAA,QAAQ,EAAE,EAHqB;AAI/BC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CAACC,OAAR,CAAgBV,aAAa,CAACW,SAA9B,EAAyC,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC1DD,MAAAA,KAAK,CAACV,MAAN,GAAe,UAAf;AACAU,MAAAA,KAAK,CAACR,IAAN,GAAaS,MAAM,CAACC,OAAP,CAAef,IAA5B;AACD,KAHD,EAD0B,CAK1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;AArB8B,CAAD,CAAhC;AAwBA,OAAO,MAAMgB,cAAc,GAAGV,YAAY,CAACW,OAApC;AAEP,OAAO,MAAMC,mBAAmB,GAAIL,KAAD,KAAY;AAC7CV,EAAAA,MAAM,EAAEU,KAAK,CAACM,SAAN,CAAgBhB,MADqB;AAE7CC,EAAAA,KAAK,EAAES,KAAK,CAACM,SAAN,CAAgBf,KAFsB;AAG7CgB,EAAAA,GAAG,EAAEP,KAAK,CAACM,SAAN,CAAgBd,IAAhB,CAAqBgB;AAHmB,CAAZ,CAA5B;AAKP,OAAO,MAAMC,kBAAkB,GAAIT,KAAD,IAAWA,KAAK,CAACM,SAAN,CAAgBd,IAAtD,C,CAEP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMkB,sBAAsB,GAAG,CACpCV,KADoC,WAGjC;AAAA,MADH;AAAEW,IAAAA,MAAM,GAAG,EAAX;AAAeC,IAAAA,MAAM,GAAG,EAAxB;AAA4BC,IAAAA,YAAY,GAAG;AAA3C,GACG;AACH,SAAOb,KAAK,CAACM,SAAN,CAAgBd,IAAhB,CAAqBsB,MAArB,CAA6BC,IAAD,IAAU;AAC3C,UAAMC,aAAa,GAAGD,IAAI,CAACrB,IAAL,CACnBuB,WADmB,GAEnBC,QAFmB,CAEVP,MAAM,CAACM,WAAP,EAFU,CAAtB;AAGA,UAAME,aAAa,GAAGP,MAAM,GAAGG,IAAI,CAACK,WAAL,CAAiBF,QAAjB,CAA0BN,MAA1B,CAAH,GAAuC,IAAnE;AACA,QAAIS,aAAa,GAAG,IAApB;;AAEA,QAAIR,YAAY,KAAK,MAArB,EAA6B;AAC3BQ,MAAAA,aAAa,GAAGN,IAAI,CAACO,QAAL,KAAkB,IAAlC;AACD,KAFD,MAEO,IAAIT,YAAY,KAAK,OAArB,EAA8B;AACnCQ,MAAAA,aAAa,GAAGN,IAAI,CAACO,QAAL,KAAkB,KAAlC;AACD,KAX0C,CAY3C;;;AACA,WAAON,aAAa,IAAIG,aAAjB,IAAkCE,aAAzC;AACD,GAdM,CAAP;AAeD,CAnBM","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\n\r\nimport data from \"../../data.json\";\r\n\r\nexport const loadCountries = createAsyncThunk(\r\n  \"@@countries/load-countries\",\r\n  () => {\r\n    return { data };\r\n  }\r\n);\r\n\r\n// export const loadCountries = createAsyncThunk(\r\n//   \"@@countries/load-countries\",\r\n//   (_, { extra: { client, api } }) => {\r\n//     return client.get(api.ALL_COUNTRIES);\r\n//   }\r\n// );\r\n\r\nconst initialState = {\r\n  status: \"idle\",\r\n  error: null,\r\n  list: [],\r\n};\r\n\r\nconst countrySlice = createSlice({\r\n  name: \"@@countries\",\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder.addCase(loadCountries.fulfilled, (state, action) => {\r\n      state.status = \"received\";\r\n      state.list = action.payload.data;\r\n    });\r\n    // .addCase(loadCountries.pending, (state) => {\r\n    //   state.status = \"loading\";\r\n    //   state.error = null;\r\n    // })\r\n    // .addCase(loadCountries.rejected, (state, action) => {\r\n    //   state.status = \"rejected\";\r\n    //   state.error = action.payload || action.meta.error;\r\n    // })\r\n    // .addCase(loadCountries.fulfilled, (state, action) => {\r\n    //   state.status = \"received\";\r\n    //   state.list = action.payload.data;\r\n    // });\r\n  },\r\n});\r\n\r\nexport const countryReducer = countrySlice.reducer;\r\n\r\nexport const selectCountriesInfo = (state) => ({\r\n  status: state.countries.status,\r\n  error: state.countries.error,\r\n  qty: state.countries.list.length,\r\n});\r\nexport const selectAllCountries = (state) => state.countries.list;\r\n\r\n// export const selectVisibleCountries = (state, { search = \"\", region = \"\" }) => {\r\n//   return state.countries.list.filter(\r\n//     (country) =>\r\n//       country.name.toLowerCase().includes(search.toLowerCase()) &&\r\n//       country.region.includes(region)\r\n//   );\r\n// };\r\n\r\nexport const selectVisibleCountries = (\r\n  state,\r\n  { search = \"\", region = \"\", filterStatus = \"\" }\r\n) => {\r\n  return state.countries.list.filter((item) => {\r\n    const matchesSearch = item.name\r\n      .toLowerCase()\r\n      .includes(search.toLowerCase());\r\n    const matchesRegion = region ? item.description.includes(region) : true;\r\n    let matchesStatus = true;\r\n\r\n    if (filterStatus === \"true\") {\r\n      matchesStatus = item.isActive === true;\r\n    } else if (filterStatus === \"false\") {\r\n      matchesStatus = item.isActive === false;\r\n    }\r\n    // Если filterStatus пустая строка, фильтр по статусу не применяется\r\n    return matchesSearch && matchesRegion && matchesStatus;\r\n  });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}